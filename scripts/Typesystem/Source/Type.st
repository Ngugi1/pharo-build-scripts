'From Pharo1.4a of ''16 June 2011'' [Latest update: #14256] on 20 December 2011 at 3:17:28 pm'!Object subclass: #Type	uses: TTyped	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TypeSystem-Core'!!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/15/2011 12:25'!(Boolean) = another       |(Type)a (Type)b ({simplify (→Type)})c|       another ifNil: [^false].       a:= self simplify.       [c := another] on: CastError do: [:ex | ^ false].       b:= c simplify.       ^[a typeEquality: b] on: CastError do: [:ex | false]! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/16/2011 18:02'!(Type) annotateSelfWith: (ClassDescription)aClass inMethod: (MethodSignature) aMethodSignature withKind: (Symbol) aSymbol	^self subclassResponsibility! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/13/2011 18:38'!(Self) asType	^self! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Type) classType	^self subclassResponsibility! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Integer) hash	^self subclassResponsibility! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Type) instanceType	^self subclassResponsibility! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Boolean) isConsistentSubtypeOf: (Type) aType	^Type is: self consistentSubtypeOf: aType! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Boolean) isSubtypeOf: (Type) aType	^Type is: self subtypeOf: aType! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Boolean) isType	^true! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Type) pureType	^self	! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Type) replaceSelfWith: (Type) aType	^self subclassResponsibility.! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/6/2011 23:08'!(Type) simplify	^self! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/13/2011 18:47'!(Boolean) typeEquality: (Self) another	<access: #protected>	^self subclassResponsibility.! !!Type methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 11:49'!(Type) typeOfSelector: (Symbol)selector fromClass: (ClassDescription) requestor	^self subclassResponsibility.! !!Type methodsFor: '*typesystem-types' stamp: 'EstebanAllende 12/7/2011 11:19'!(Boolean) isDyn	^false! !!Type methodsFor: '*typesystem-types' stamp: 'EstebanAllende 12/7/2011 11:19'!(Boolean) isLambda	^false! !!Type methodsFor: '*typesystem-types' stamp: 'EstebanAllende 12/7/2011 11:19'!(Boolean) isNominal	^false! !!Type methodsFor: '*typesystem-types' stamp: 'EstebanAllende 12/7/2011 11:20'!(Boolean) isSelf	^false! !!Type methodsFor: '*typesystem-types' stamp: 'EstebanAllende 12/7/2011 11:20'!(Boolean) isStructural	^false! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Type class	uses: TTyped classTrait	instanceVariableNames: '(Dictionary)subtypeRelations (Dictionary)consistentSubtypeRelations (Type)defaultType'!!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 02:12'!compilerContext	^OTCSupport defaultCompilerContext! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 02:12'!(Type) defaultType	^defaultType! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 02:12'!(Self) defaultType: (Type) dynType	"Here we set the default type when the smalltalk programmer has not declared any types. Normally, it would be a DynType instance"	defaultType := dynType! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/12/2011 17:49'!(Self) initialize	OTCSupport bootstrapping ifFalse: [^self].	subtypeRelations := IdentityDictionary new.	consistentSubtypeRelations := IdentityDictionary new.! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 02:12'!(Boolean) is: (Type) type1 consistentSubtypeOf: (Type) type2	^self is: type1 relatedWith: type2 usingRelationTable: consistentSubtypeRelations! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 02:13'!(Boolean) is: (Type)type1 relatedWith: (Type)type2 usingRelationTable: (Dictionary)relDict	|(Class)t1Class 	 (Class)t2Class 	 (Dictionary)t1Dict 	 (Type Type → Boolean)rel|		t1Class := type1 class.	[		t1Dict := relDict at: t1Class ifAbsent:[nil].		t1Dict ifNotNil: [			t2Class := type2 class.			[				rel := t1Dict at: t2Class ifAbsent: [nil].				rel ifNotNil: [^rel value: type1 value: type2].				t2Class := t2Class superclass.			] doWhileTrue: [(t2Class == Type) | (t2Class inheritsFrom: Type)]		].		t1Class := t1Class superclass.	] doWhileTrue: [ (t1Class == Type) | (t1Class inheritsFrom: Type)].	^false! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 02:13'!(Boolean) is: (Type) type1 subtypeOf: (Type) type2	^self is: type1 relatedWith: type2 usingRelationTable: subtypeRelations! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 02:14'!(Self) registerConsistentSubtypeRelationBetween: (Class) aClass1 and: (Class) aClass2 using: (Type Type → Boolean) aBlock	|(Dictionary)cSubtypeClass1Dict|	cSubtypeClass1Dict := consistentSubtypeRelations at: aClass1 ifAbsentPut: [IdentityDictionary new].	cSubtypeClass1Dict at: aClass2 put: aBlock! !!Type class methodsFor: 'as yet unclassified' stamp: 'EstebanAllende 12/7/2011 02:14'!(Self) registerSubtypeRelationBetween: (Class) aClass1 and: (Class) aClass2 using: (Type Type → Boolean) aBlock	|(Dictionary)subtypeClass1Dict|	subtypeClass1Dict := subtypeRelations at: aClass1 ifAbsentPut: [IdentityDictionary new].	subtypeClass1Dict at: aClass2 put: aBlock! !Type initialize!